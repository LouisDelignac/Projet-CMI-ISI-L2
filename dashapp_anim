import model_animation.data_animation
import view_animation.GUI_ANIMATION

import dash
from dash import html
from dash import dcc
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output


app = dash.Dash(__name__, external_stylesheets=[dbc.themes.SKETCHY])

# styling the sidebar
SIDEBAR_STYLE = {
	"position": "fixed",
	"top": 0,
	"left": 0,
	"bottom": 0,
	"width": "16rem",
	"padding": "2rem 1rem",
	"background-color": "#f8f9fa",
}

# padding for the page content
CONTENT_STYLE = {
	"margin-left": "18rem",
	"margin-right": "2rem",
	"padding": "2rem 1rem",
}

sidebar = html.Div(
	[
		html.H2("CMI ISI", className="display-4"),
		html.Hr(),
		html.P(
			"Forêt Pyrénnées", className="lead"
		),
		dbc.Nav(
			[
                dbc.NavLink("Animation", href="/animation", active="exact" )
			],
			vertical=True,
			pills=True,
		),
	],
	style=SIDEBAR_STYLE,
)

content = html.Div(id="page-content", children=[], style=CONTENT_STYLE)

app.layout = html.Div([
	dcc.Location(id="url"),
	sidebar,
	content
])

@app.callback(
	Output("page-content", "children"),
	[Input("url", "pathname")])

def render_page_content(pathname):
    if pathname == "/animation":
        graph = view_animation.GUI_ANIMATION.init_graph_animation_graph(), view_animation.GUI_ANIMATION.init_graph_animation_pie() # on initialise le graph
        return [ # on renvoie un code html qui affiche le titre de la page, une
                 # barre de séparation et le graphique
            html.H1('Diagramme de dispersion', id='scatter_view',
		style={'textAlign':'left'}),
            html.Hr(style={'width': '75%', 'align': 'center'}),
            html.Div([
                graph
            ])
        ]
        
    
    else:
        return html.Div(
			[
				html.H1("404: Not found", className="text-danger"),
				html.Hr(),
				html.P(f"The pathname {pathname} was not recognised..."),
			]
		)

@app.callback(
    Output(component_id='my-graph', component_property='figure'),
    Input(component_id='dropdown', component_property='value'),
)
def update_animation_graph(station_chosen):
    sub_df, attributes = model_animation.data_animation.extract_df_animation_graph(station_chosen)
    return view_animation.GUI_ANIMATION.build_figure_animation_graph(sub_df, attributes)

@app.callback(
    Output(component_id='pie-graph', component_property='figure'),
    Input(component_id='my-graph', component_property='hoverData'),
    Input(component_id='my-graph', component_property='clickData'),
    Input(component_id='my-graph', component_property='selectedData'),
    Input(component_id='dropdown', component_property='value')
)
def update_side_graph(hov_data, clk_data, slct_data, station_chosen):
    if hov_data is None:
        sub_df, attributes = model_animation.data_animation.extract_df_animation_pie(station_chosen)
        return view_animation.GUI_ANIMATION.build_figure_animation_pie_if(sub_df, attributes)
    else:
        #print(f'hover data: {hov_data}')
        # print(hov_data['points'][0]['customdata'][0])
        # print(f'click data: {clk_data}')
        # print(f'selected data: {slct_data}')
        #hov_year = hov_data['points'][0]['x']
        sub_df, attributes = model_animation.data_animation.extract_df_animation_pie(station_chosen)
        return view_animation.GUI_ANIMATION.build_figure_animation_pie_else(sub_df, attributes)
    
if __name__=='__main__':
	app.run_server()
